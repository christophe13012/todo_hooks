{"version":3,"sources":["logo.svg","Components/Add.js","Components/ViewTodo.js","Components/Edit.js","Components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Add","add","useState","todo","setTodo","style","padding","marginTop","Input","backgroundColor","marginRight","paddingLeft","placeholder","value","onChange","e","target","Button","variant","color","onClick","styles","over","textDecoration","ViewTodo","onDelete","onEdit","Fragment","ListItemText","isOver","primary","content","Icon","IconButton","aria-label","id","Edit","edit","handleEdit","newTodo","todoUpdated","Todo","checkOver","editMode","setEditMode","ListItem","borderBottom","ListItemIcon","Checkbox","App","todoList","setTodoList","todoListUpdated","index","findIndex","t","handleDelete","filter","list","console","log","className","src","logo","alt","Typography","width","margin","map","key","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,mOC2B5BC,EAxBH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAAU,EACCC,mBAAS,IADV,mBAChBC,EADgB,KACVC,EADU,KAEvB,OACE,yBAAKC,MAAO,CAAEC,QAAS,GAAIC,UAAW,KACpC,kBAACC,EAAA,EAAD,CACEH,MAAO,CAAEI,gBAAiB,QAASC,YAAa,EAAGC,YAAa,GAChEC,YAAY,yBACZC,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAQW,EAAEC,OAAOH,UAElC,kBAACI,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,YACNC,QAAS,WACPnB,EAAIE,GACJC,EAAQ,MALZ,a,iECOAiB,EAAS,CACbC,KAAM,CAAEC,eAAgB,iBAGXC,EAnBE,SAAC,GAAgC,IAA9BrB,EAA6B,EAA7BA,KAAMsB,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAClC,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CACEvB,MAAOF,EAAK0B,OAASR,EAAOC,KAAO,KACnCQ,QAAS3B,EAAK4B,UAEhB,kBAACC,EAAA,EAAD,CAAMZ,QAAS,kBAAMM,MAArB,UACA,kBAACO,EAAA,EAAD,CAAYC,aAAW,SAASd,QAAS,kBAAMK,EAAStB,EAAKgC,MAC3D,kBAAC,IAAD,CAAY9B,MAAO,CAAEc,MAAO,YAChB,M,sOCXpB,IA2BeiB,EA3BF,SAAC,GAAgC,IAA9BjC,EAA6B,EAA7BA,KAAMkC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAAiB,EAChBpC,mBAASC,GADO,mBACpCoC,EADoC,KAC3BnC,EAD2B,KAE3C,OACE,kBAACwB,EAAA,EAAD,KACE,kBAACpB,EAAA,EAAD,CACEH,MAAO,CAAEI,gBAAiB,QAASC,YAAa,EAAGC,YAAa,GAChEE,MAAO0B,EAAQR,QACfjB,SAAU,SAAAC,GACR,IAAMyB,E,yVAAW,IAAQD,GACzBC,EAAYT,QAAUhB,EAAEC,OAAOH,MAC/BT,EAAQoC,MAGZ,kBAACvB,EAAA,EAAD,CACEE,MAAM,YACNC,QAAS,WACPiB,EAAKE,GACLD,IACAlC,EAAQ,MALZ,aCcSqC,EAnBF,SAAC,GAAyC,IAAvCtC,EAAsC,EAAtCA,KAAMsB,EAAgC,EAAhCA,SAAUiB,EAAsB,EAAtBA,UAAWL,EAAW,EAAXA,KAAW,EACpBnC,oBAAS,GADW,mBAC7CyC,EAD6C,KACnCC,EADmC,KAE9CN,EAAa,WACjBM,GAAaD,IAEf,OACE,kBAACE,EAAA,EAAD,CAAUxC,MAAO,CAAEyC,aAAc,oBAC/B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU3C,MAAO,CAAEc,MAAO,SAAWC,QAAS,kBAAMsB,EAAUvC,OAE/DwC,EACC,kBAAC,EAAD,CAAMxC,KAAMA,EAAMkC,KAAMA,EAAMC,WAAYA,IAE1C,kBAAC,EAAD,CAAUnC,KAAMA,EAAMsB,SAAUA,EAAUC,OAAQY,MCmC3CW,EArDH,WAAO,IAAD,EACgB/C,mBAAS,CACvC,CAAEiC,GAAI,EAAGJ,QAAS,eAAgBF,QAAQ,GAC1C,CAAEM,GAAI,EAAGJ,QAAS,gBAAiBF,QAAQ,KAH7B,mBACTqB,EADS,KACCC,EADD,KAWVd,EAAO,SAAAlC,GACX,IAAMiD,EAAe,YAAOF,GACtBG,EAAQD,EAAgBE,WAAU,SAAAC,GAAC,OAAIA,EAAEpB,KAAOhC,EAAKgC,MAC3DiB,EAAgBC,GAASlD,EACzBgD,EAAYC,IAERI,EAAe,SAAArB,GACnB,IAAMiB,EAAkBF,EAASO,QAAO,SAAAtD,GAAI,OAAIA,EAAKgC,KAAOA,KAC5DgB,EAAYC,IAERV,EAAY,SAAAvC,GAChB,IAAMkD,EAAQH,EAASI,WAAU,SAAAC,GAAC,OAAIA,EAAEpB,KAAOhC,EAAKgC,MAC9CuB,EAAI,YAAOR,GACjBQ,EAAKL,GAAOxB,QAAU6B,EAAKL,GAAOxB,OAClCsB,EAAYO,IAId,OAFAC,QAAQC,IAAIV,GAGV,yBAAKW,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAACC,EAAA,EAAD,CAAY/C,QAAQ,MAApB,oCAEF,yBAAKb,MAAO,CAAE6D,MAAO,IAAKC,OAAQ,SAC/BjB,EAASkB,KAAI,SAAAjE,GACZ,OACE,kBAAC,EAAD,CACEkE,IAAKlE,EAAKgC,GACVE,KAAMA,EACNlC,KAAMA,EACNsB,SAAU+B,EACVd,UAAWA,QAKnB,kBAAC,EAAD,CAAKzC,IA3CG,SAAA8B,GACV,IACM5B,EAAO,CAAEgC,GADD,YAAIe,GAAUoB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErC,GAAKoC,EAAEpC,MAAI,GAAGA,GAAK,EACtCJ,UAASF,QAAQ,GAC3CsB,EAAY,GAAD,mBAAKD,GAAL,CAAe/C,KAC1BwD,QAAQC,IAAIV,QCJIuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e3281e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState } from \"react\";\r\nimport { Input, Button } from \"@material-ui/core\";\r\n\r\nconst Add = ({ add }) => {\r\n  const [todo, setTodo] = useState(\"\");\r\n  return (\r\n    <div style={{ padding: 20, marginTop: 20 }}>\r\n      <Input\r\n        style={{ backgroundColor: \"white\", marginRight: 7, paddingLeft: 5 }}\r\n        placeholder=\" Entrer votre todo ici\"\r\n        value={todo}\r\n        onChange={e => setTodo(e.target.value)}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={() => {\r\n          add(todo);\r\n          setTodo(\"\");\r\n        }}\r\n      >\r\n        Valider\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Add;\r\n","import React from \"react\";\r\nimport { ListItemText, IconButton } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nconst ViewTodo = ({ todo, onDelete, onEdit }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <ListItemText\r\n        style={todo.isOver ? styles.over : null}\r\n        primary={todo.content}\r\n      />\r\n      <Icon onClick={() => onEdit()}>create</Icon>\r\n      <IconButton aria-label=\"delete\" onClick={() => onDelete(todo.id)}>\r\n        <DeleteIcon style={{ color: \"white\" }} />\r\n      </IconButton>{\" \"}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  over: { textDecoration: \"line-through\" }\r\n};\r\n\r\nexport default ViewTodo;\r\n","import React, { useState } from \"react\";\r\nimport { Input, Button } from \"@material-ui/core\";\r\nimport { ListItemText } from \"@material-ui/core\";\r\n\r\nconst Edit = ({ todo, edit, handleEdit }) => {\r\n  const [newTodo, setTodo] = useState(todo);\r\n  return (\r\n    <ListItemText>\r\n      <Input\r\n        style={{ backgroundColor: \"white\", marginRight: 7, paddingLeft: 5 }}\r\n        value={newTodo.content}\r\n        onChange={e => {\r\n          const todoUpdated = { ...newTodo };\r\n          todoUpdated.content = e.target.value;\r\n          setTodo(todoUpdated);\r\n        }}\r\n      />\r\n      <Button\r\n        color=\"secondary\"\r\n        onClick={() => {\r\n          edit(newTodo);\r\n          handleEdit();\r\n          setTodo(\"\");\r\n        }}\r\n      >\r\n        Valider\r\n      </Button>\r\n    </ListItemText>\r\n  );\r\n};\r\n\r\nexport default Edit;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Checkbox,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\n\r\nimport ViewTodo from \"./ViewTodo\";\r\nimport Edit from \"./Edit\";\r\n\r\nconst Todo = ({ todo, onDelete, checkOver, edit }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const handleEdit = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n  return (\r\n    <ListItem style={{ borderBottom: \"1px solid white\" }}>\r\n      <ListItemIcon>\r\n        <Checkbox style={{ color: \"white\" }} onClick={() => checkOver(todo)} />\r\n      </ListItemIcon>\r\n      {editMode ? (\r\n        <Edit todo={todo} edit={edit} handleEdit={handleEdit} />\r\n      ) : (\r\n        <ViewTodo todo={todo} onDelete={onDelete} onEdit={handleEdit} />\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Typography } from \"@material-ui/core\";\nimport Add from \"./Components/Add\";\nimport Todo from \"./Components/Todo\";\n\nconst App = () => {\n  const [todoList, setTodoList] = useState([\n    { id: 0, content: \"premier todo\", isOver: false },\n    { id: 1, content: \"deuxieme todo\", isOver: false }\n  ]);\n  const add = content => {\n    const index = [...todoList].sort((a, b) => b.id - a.id)[0].id + 1;\n    const todo = { id: index, content, isOver: false };\n    setTodoList([...todoList, todo]);\n    console.log(todoList);\n  };\n  const edit = todo => {\n    const todoListUpdated = [...todoList];\n    const index = todoListUpdated.findIndex(t => t.id === todo.id);\n    todoListUpdated[index] = todo;\n    setTodoList(todoListUpdated);\n  };\n  const handleDelete = id => {\n    const todoListUpdated = todoList.filter(todo => todo.id !== id);\n    setTodoList(todoListUpdated);\n  };\n  const checkOver = todo => {\n    const index = todoList.findIndex(t => t.id === todo.id);\n    const list = [...todoList];\n    list[index].isOver = !list[index].isOver;\n    setTodoList(list);\n  };\n  console.log(todoList);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Typography variant=\"h3\">Bienvenue sur la todo-app hooks</Typography>\n      </header>\n      <div style={{ width: 400, margin: \"auto\" }}>\n        {todoList.map(todo => {\n          return (\n            <Todo\n              key={todo.id}\n              edit={edit}\n              todo={todo}\n              onDelete={handleDelete}\n              checkOver={checkOver}\n            />\n          );\n        })}\n      </div>\n      <Add add={add} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}